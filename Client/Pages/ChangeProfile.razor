@page "/changeprofile"

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthenticationStateProvider GetAuthenticationStateAsync


@using WasmUI.Shared
@using System.IO


@if (prof == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenTemplateForm Data="@prof" Submit="@(async(ProfileClass args) => { await Submit(args); })">
        <div class="row">
            <RadzenFieldset Text="CHANGE MY PROFILE">
                <div class="row">
                    <div class="col-md-3 align-items-center d-flex">
                        <RadzenLabel Text="Image:" />
                    </div>
                    <div class="col-md-2 mb-2">
                        <RadzenUpload @ref="upload" @bind-Value="prof.Avatara" Multiple="false" Accept="image/*" Auto="false"
                                      Url=@($"uploadava/{me}")
                                      Change=@(args => OnChange(args, "Changed")) />

                    </div>

                </div>
                <div class="row">
                    <div class="col-md-3 align-items-center d-flex">

                    </div>
                    <div class="col-md-9 mb-2">
                        <RadzenLabel style="width: 100%; color: red;" Text=@imgtext />
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-3 align-items-center d-flex">
                        <RadzenLabel Text="Name:" />
                    </div>
                    <div class="col-md-9 mb-2">
                        <RadzenTextBox style="width: 100%;" Name="Name" @bind-Value="prof.Name" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3 align-items-center d-flex">
                    </div>
                    <div class="col-md-9 mb-2">
                        <RadzenLengthValidator Component="Name" Min="4" Text="Name should be at least 4 characters" Style="width: 100%;" />
                        <RadzenLengthValidator Component="Name" Max="15" Text="Name should be at most 15 characters" Style="width: 100%;" />
                        <RadzenLabel style="width: 100%; color: red;" Text=@titletext />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3 align-items-center d-flex">
                        <RadzenLabel Text="From:" />
                    </div>
                    <div class="col-md-9 mb-2">
                        <RadzenTextBox style="width: 100%;" Name="From" @bind-Value="prof.From" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3 align-items-center d-flex">
                    </div>
                    <div class="col-md-9 mb-2">
                        @*<RadzenLengthValidator Component="From" Min="4" Text="From should be at least 4 characters" Style="width: 100%;" />*@
                        <RadzenLengthValidator Component="From" Max="15" Text="From should be at most 15 characters" Style="width: 100%;" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3 align-items-center d-flex">
                        <RadzenLabel Text="Whatsapp:" />
                    </div>
                    <div class="col-md-9 mb-2">
                        <RadzenMask Mask="(***) ***-**-**" Pattern="[^0-9]" Placeholder="(000) 000-00-00" Name="Whatsapp" @bind-Value="prof.Whatsapp" style="width: 100%;" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3 align-items-center d-flex">
                        <RadzenLabel Text="Skype:" />
                    </div>
                    <div class="col-md-9 mb-2">
                        <RadzenTextBox style="width: 100%;" Name="Skype" @bind-Value="prof.Skype" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3 align-items-center d-flex">
                    </div>
                    <div class="col-md-9 mb-2">
                        @*<RadzenLengthValidator Component="Skype" Min="4" Text="Skype should be at least 4 characters" Style="width: 100%;" />*@
                        <RadzenLengthValidator Component="Skype" Max="15" Text="Skype should be at most 15 characters" Style="width: 100%;" />
                    </div>
                </div>

                <div>
                    <div>
                        <RadzenButton ButtonType="Radzen.ButtonType.Submit" Icon="save" Text="Save" />
                        <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel" />
                    </div>
                </div>

            </RadzenFieldset>

        </div>

    </RadzenTemplateForm>
}


@code {

    ProfileClass prof;

    RadzenUpload upload;
    string me;
    bool AvaChenged = false;
    string imgtext;

    List<string> ImageExtentions = new List<string>() { ".jpg", ".jpeg", ".png", ".bmp", ".gif" };
    string titletext = "";


    protected override async Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        me = authstate.User.Identity.Name;

        prof = await Http.GetFromJsonAsync<ProfileClass>($"Profile?AppUserId={me}");

    }



    void OnChange(UploadChangeEventArgs args, string name)
    {
        if (args.Files.Count() > 0)
        {
            var fileName = args.Files.First().Name;
            var ext = Path.GetExtension(fileName);
            if (ImageExtentions.Contains(ext))
            {
                AvaChenged = true;
                imgtext = "";
            }
            else
            {
                imgtext = "Enter valid image (.jpg, .jpeg, .png, .bmp, .gif)";
                AvaChenged = false;
            }
        }
        else
            AvaChenged = false;

    }

    async Task Submit(ProfileClass arg)
    {
        string nname = arg.Name.Trim();

        if (string.IsNullOrEmpty(nname))
        {
            titletext = "Name cannot be empty";
            return;
        }

        if (AvaChenged)
        {
            var f = upload.Upload();
        }

        prof.Name = nname;
        prof.From = prof.From.Trim();
        prof.Skype = prof.Skype.Trim();

        await Http.PutAsJsonAsync<ProfileClass>("Profile", prof);

        NavigationManager.NavigateTo("/profile");
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("/profile");
    }

}
