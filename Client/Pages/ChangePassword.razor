@page "/changepassword"

@inject HttpClient Http
@using WasmUI.Shared.DTO
@using WasmUI.Client.Services
@inject NavigationManager nav
@using System.Text.Json


<RadzenCard>
    <RadzenTemplateForm TItem="ChangeModel" Data=@model Submit=@OnSubmit>
        <h3>Change password</h3>
        @if (ShowAuthError)
        {
            <div class="alert alert-danger" role="alert">
                <p>@Error</p>
            </div>
        }

        <div class="row">
            <div class="col-md-2 align-items-center d-flex">
                <RadzenLabel Text="Current password:" />
            </div>
            <div class="col-md-10 mb-4">
                <RadzenPassword style="width: 100%;" Name="OldPassword" @bind-Value="@model.OldPassword" />
                <div>
                    <RadzenRequiredValidator Component="OldPassword" Text="Enter current password" Popup="@popup" Style="position: absolute" />
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-2 align-items-center d-flex">
                <RadzenLabel Text="Password:" />
            </div>
            <div class="col-md-10 mb-4">
                <RadzenPassword style="width: 100%;" Name="Password" @bind-Value="@model.Password" />
                <div>
                    <RadzenRequiredValidator Component="Password" Text="Enter new password" Popup="@popup" Style="position: absolute" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-2 align-items-center d-flex">
                <RadzenLabel Text="Confirm password:" />
            </div>
            <div class="col-md-10 mb-4">
                <RadzenPassword style="width: 100%;" Name="RepeatPassword" @bind-Value="@model.RepeatPassword" />
                <div>
                    <RadzenRequiredValidator Component="RepeatPassword" Text="Repeat your new password" Popup=@popup Style="position: absolute" />
                    <RadzenCompareValidator Visible=@(!string.IsNullOrEmpty(model.RepeatPassword)) Value=@model.Password Component="RepeatPassword" Text="Passwords should be the same" Popup=@popup Style="position: absolute" />
                </div>

            </div>
        </div>
        <div class="row mt-2">
            @*<RadzenButton ButtonStyle="ButtonStyle.Secondary" Click=@(args => OnClick()) Text="Login" Style="margin-bottom: 20px; width: 150px" />*@
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Secondary" Text="Change"></RadzenButton>
        </div>


    </RadzenTemplateForm>
</RadzenCard>

@code {
    class ChangeModel
    {
        public string OldPassword { get; set; }
        public string Password { get; set; }
        public double Value { get; set; }
        public string RepeatPassword { get; set; }
    }

    bool popup;
    double targetValue = 1;

    CompareOperator compareOperator = CompareOperator.Equal;

    ChangeModel model = new ChangeModel();

    bool ShowAuthError = false;
    string Error;

    async Task OnSubmit()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var me = authstate.User.Identity.Name;

        var usr = new UserForChangeDto()
        {
            Email = me,
            OldPassword = model.OldPassword,
            Password = model.Password,
            ConfirmPassword = model.RepeatPassword
        };
        var resp = await Http.PostAsJsonAsync<UserForChangeDto>("ChangePassword", usr);
        var Content = await resp.Content.ReadAsStringAsync();
        var result = JsonSerializer.Deserialize<ChangeResponseDto>(Content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

        if (!result.IsSuccessfulRegistration)
        {
            ShowAuthError = true;
            if (result.Errors.Count() > 0)
                Error = result.Errors.FirstOrDefault();
            else
                Error = "Failed!";
        }
        else
        {

            nav.NavigateTo("/login");
        }
    }

}
