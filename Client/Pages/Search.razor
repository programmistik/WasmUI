@page "/search/{tag}"
@page "/search"

<h3>Search</h3>
<hr />

<div class="row">

    <div class="col-md-10 mb-2">
        <RadzenTextBox style="width: 100%;" Name="Title" @bind-Value=@searchString />
    </div>
    <RadzenButton ButtonStyle="ButtonStyle.Info" Click=@(args => OnClick()) Icon="search" style="margin-left: 11px; width: 50px;">
    </RadzenButton>
</div>
<RadzenCheckBoxList @bind-Value=@values TValue="int" Change=@(args => OnChange(args, "CheckBoxList with horizontal orientation")) Style="margin-bottom: 5px;">
    <Items>
        <RadzenCheckBoxListItem Text="Profile" Value="1" />
        <RadzenCheckBoxListItem Text="Title" Value="2" />
        <RadzenCheckBoxListItem Text="Tag" Value="3" />
    </Items>
</RadzenCheckBoxList>

<div class="row">
    @foreach (var item in profiles)
    {
        <div class="col-12 col-md-3 mb-2">
            <div class="card">
                <RadzenImage Path=@item.Avatara
                             class="card-img-top entry-title"
                             @onclick="() => ClickProf(item.AppUserId)"
                             Style="cursor: pointer;image-orientation: from-image;object-fit: cover; height:250px">
                </RadzenImage>

                <div class="card-body">

                    <h5 class="card-title">@item.Name</h5>


                </div>
            </div>
        </div>
    }
</div>

<div class="row">
    @foreach (var item in posts)
    {
        <div class="col-12 col-md-3 mb-2">
            <div class="card">
                <RadzenImage Path=@item.Image
                             class="card-img-top entry-title"
                             @onclick="() => ClickPost(item.UniqueId)"
                             Style="cursor: pointer;image-orientation: from-image;object-fit: cover; height:250px">
                </RadzenImage>

                <div class="card-body">

                    <h5 class="card-title">@item.Title</h5>

                    <p class="card-text text-muted"> 👁 @item.ViewsProfileId.Count() ❤ @item.LikesProfileId.Count()</p>
                    @*<div class="mt-3">
                            <RadzenButton style="width: 70px; padding: 0" Click=@(args => OnClickView(item.Post.UniqueId)) Text="View" ButtonStyle="ButtonStyle.Secondary" />
                        </div>*@
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string tag { get; set; }

    string searchString = "";

    IEnumerable<int> values = new int[] { 1, 2, 3 };
    List<ProfileClass> profiles = new List<ProfileClass>();
    List<Post> posts = new List<Post>();


    void OnChange(IEnumerable<int> value, string name)
    {
    }
    void ClickPost(string id)
    {
        NavigationManager.NavigateTo($"/singlepost/{id}");
    }

    void ClickProf(string id)
    {
        NavigationManager.NavigateTo($"/user/{id}");
    }
    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(tag))
        {
            values = new int[] { 3 };
            searchString = tag;
        }
    }



    async Task OnClick()
    {
        profiles.Clear();
        posts.Clear();

        if (!string.IsNullOrEmpty(searchString))
        {
            var titlePosts = new List<Post>();
            var tagPosts = new List<Post>();

            foreach (var item in values)
            {
                switch (item)
                {
                    case 1:
                        {
                            // profile
                            profiles = await Http.GetFromJsonAsync<List<ProfileClass>>($"SearchProfile?searchStr={searchString}");

                            break;
                        }
                    case 2:
                        {
                            titlePosts = await Http.GetFromJsonAsync<List<Post>>($"SearchPost?searchStr={searchString}");
                            break;
                        }
                    case 3:
                        {
                            tagPosts = await Http.GetFromJsonAsync<List<Post>>($"SearchTag?searchStr={searchString}");
                            break;
                        }
                    default:
                        break;
                }
            }

            posts = titlePosts.Union(tagPosts).ToList();
        }



    }
}
